name: snap-automation-example
adopt-info: app-1
summary: Example Snap to demonstrate release automation
description: |
  This Snap packages 3 components provided by external GIT
  repositories.  Releases of these 3 components are marked by GIT
  tags.

  The first application, app-1, is the principal application which we
  are snapping here, therefore we derive the Snap's version number
  from app-1.  app-2 and app-3 are auxiliary apps needed by app-1 and
  therefore we have to include them in this Snap.

  We use this example to demonstrate automating new releases of this
  Snap whenever a new release of at least one of the 3 components gets
  issued, to never be behind with Snap package of our app in the Snap
  Store.

  For this we will use the scripting developed for Ubuntu Core Desktop
  and Ubuntu in general, as described in this Ubuntu blog:

      https://ubuntu.com/blog/improving-snap-maintenance-with-automation

  and hosted on the Ubuntu GitHub:

      https://github.com/ubuntu/desktop-snaps

  Note that this Snap is using only trivial application producing nothing
  more than static terminal messages. So if you stumble upon it in the Snap
  Store, do not install it.

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict
base: core22

apps:
  snap-automation-example:
    command: usr/bin/example-app

parts:
  app-1:
    source: https://github.com/Rudra-IITM/versioning-example-app-1
    source-type: git
    plugin: make
    source-tag: 'v2.4.3'
    source-depth: 1
    override-pull: |
      craftctl default
      craftctl set version=$(git describe --tags --abbrev=10)

  app-2:
    source: https://github.com/Rudra-IITM/versioning-example-app-2
    source-type: git
    source-tag: '1.0b2'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: '%V'
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: make

  app-3:
    source: https://github.com/Rudra-IITM/versioning-example-app-3
    source-type: git
    source-tag: debian/3.22.10+dfsg0-4
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: dump
    organize:
      app-3: usr/bin/
    prime:
      - usr/bin/app-3

  hplip:
    # We need only the PostScript printer PPD files and the hpps
    # filter executable (for support for PIN-secured printing). We
    # clean up the PPDs from some common errors and as the hpps
    # executable is very simple, we do not run "./configure; make;
    # make install" but call gcc directly instead.
    #
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.v2.git
    source-type: git
    source-tag: debian/3.22.10+dfsg0-4
    source-depth: 1 
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
#     lower-than: '2'
#     no-9x-revisions: true
    # Excluding hplip from the update automation process because the UpdateSnap script is
    # unable to retrieve the source-tag or source-branch for this repository.
# ext:updatesnap
#   version-format:
#     ignore: true
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.22.10/hplip-3.22.10.tar.gz
    plugin: nil
    override-build: |
      set -eux
      cd prnt/hpps
      touch config.h
      gcc -o hpps *.c -I. -I$CRAFT_STAGE/usr/include/ -L$CRAFT_STAGE/usr/lib/ -lcups
      rm config.h
      cd ../..
      mkdir -p $CRAFT_PART_INSTALL
      cp prnt/hpps/hpps $CRAFT_PART_INSTALL
      # Remove executable bits from PPD files
      find prnt/ps -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find prnt/ps -type f \! -name '*.ppd*' -print0 | xargs -0 rm || :
      # Unzip the PPD files (for upstream source)
      # find prnt/ps -type f -name '*.ppd.gz' -print0 | xargs -0 gunzip || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find prnt/ps -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $CRAFT_STAGE/bin/pyppd -v -o $CRAFT_PART_INSTALL/hplip-ps-ppds prnt/ps
      craftctl default
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      hplip-ps-ppds: usr/share/ppd/hplip-ps-ppds
      hpps: usr/lib/ps-printer-app/filter/hpps
    stage:
      - usr/bin
      - usr/share/ppd
      - usr/lib/ps-printer-app
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
      - usr/lib/ps-printer-app
    after: [cups, pyppd]

  pappl-retrofit:
    source: https://github.com/openprinting/pappl-retrofit
    source-type: git
    source-tag: '1.0b2'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: '%V'
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - perl-base
    stage-packages:
      - libusb-1.0-0
    organize:
      usr/share/legacy-printer-app/testpage.pdf: usr/share/ps-printer-app/testpage.pdf
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app/testpage.pdf
      - -var
      - -usr/bin/legacy-printer-app
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/lib/legacy-printer-app
      - -usr/share/legacy-printer-app
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups, pappl, libcupsfilters, libppd]


  scripts:
    source: .
    plugin: dump
    organize:
      example-app: usr/bin/
    prime:
      - usr/bin/example-app
