name: snap-automation-example
adopt-info: app-1
summary: Example Snap to demonstrate release automation
description: |
  This Snap packages 3 components provided by external GIT
  repositories.  Releases of these 3 components are marked by GIT
  tags.

  The first application, app-1, is the principal application which we
  are snapping here, therefore we derive the Snap's version number
  from app-1.  app-2 and app-3 are auxiliary apps needed by app-1 and
  therefore we have to include them in this Snap.

  We use this example to demonstrate automating new releases of this
  Snap whenever a new release of at least one of the 3 components gets
  issued, to never be behind with Snap package of our app in the Snap
  Store.

  For this we will use the scripting developed for Ubuntu Core Desktop
  and Ubuntu in general, as described in this Ubuntu blog:

      https://ubuntu.com/blog/improving-snap-maintenance-with-automation

  and hosted on the Ubuntu GitHub:

      https://github.com/ubuntu/desktop-snaps

  Note that this Snap is using only trivial application producing nothing
  more than static terminal messages. So if you stumble upon it in the Snap
  Store, do not install it.

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict
base: core22

apps:
  snap-automation-example:
    command: usr/bin/example-app

parts:
  foo2zjs:
    # Upstream source is not available any more, using Debian packaging
    # GIT instead
    # We do support color profiles in the sub-directories of
    # /var/snap/ghostscript-printer-app/common/foo2zjs but we do not
    # support automatic loading of firmware files. For those printers the
    # HPLIP Printer Application (with plugin loaded in-app) should be used.
    source: https://salsa.debian.org/printing-team/foo2zjs.git
    source-type: git
    source-tag: debian/20200505dfsg0-2
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
    plugin: nil
    override-build: |
      set -eux
      cp printer-profile.in printer-profile
      # Adjust paths in Makefile
      cp Makefile Makefile.orig
      perl -p -i -e  's:\$\(PREFIX\)/share/foo2:/var/snap/ghostscript-printer-app/common/foo2zjs/foo2:' Makefile
      make all PREFIX=/snap/ghostscript-printer-app/current/usr CUPS_SERVERBIN=$CRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app CUPS_DEVEL=1 CUPS_GOODAPI=1
      cp Makefile.orig Makefile
      make install PREFIX=$CRAFT_PART_INSTALL/usr CUPS_SERVERBIN=$CRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app
      # Install missing files
      mkdir -p $CRAFT_PART_INSTALL/usr/bin/
      cp getweb $CRAFT_PART_INSTALL/usr/bin/
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter
      rm -f $CRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter/command2foo2lava-pjl
      cp command2foo2lava-pjl $CRAFT_PART_INSTALL/usr/lib/ghostscript-printer-app/filter
      # Adjust the paths to the auxiliary files
      perl -p -i -e  's:PREFIX=.*:PREFIX=/snap/ghostscript-printer-app/current/usr:' $CRAFT_PART_INSTALL/usr/bin/*-wrapper
      perl -p -i -e  's:\$PREFIX/share/foo2:/var/snap/ghostscript-printer-app/common/foo2zjs/foo2:' $CRAFT_PART_INSTALL/usr/bin/*-wrapper
      perl -p -i -e  's:/usr/share/":/var/snap/ghostscript-printer-app/common/foo2zjs/":' $CRAFT_PART_INSTALL/usr/bin/getweb
      perl -p -i -e  's:/usr/share/\$FOO:/var/snap/ghostscript-printer-app/common/foo2zjs/\$FOO:' $CRAFT_PART_INSTALL/usr/bin/printer-profile*
      # Use $TMPDIR for temporary directory
      perl -p -i -e  's:/tmp:\$TMPDIR:' $CRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Add "-dNOINTERPOLATE" to the Ghostscript command lines to make
      # Ghostscript rendering the pages significantly faster
      perl -p -i -e 's/dNOPAUSE/dNOPAUSE -dNOINTERPOLATE/g' $CRAFT_PART_INSTALL/usr/bin/*-wrapper
      # Set up the PPD file collection
      cp -r PPD ppd
      # Remove the PPDs of printers which need their firmware loaded whenever
      # they are turned on. User should use the HPLIP Printer Application
      # with them
      for model in `cat Makefile | grep install-usermap | cut -d j -f 2 | cut -d ' ' -f 1`; do
        rm ppd/HP-LaserJet_$model.ppd
      done
      # Compress the included PPD files
      $CRAFT_STAGE/bin/pyppd -v -o foo2zjs-ppds ppd
      rm -rf ppd
      mkdir -p $CRAFT_PART_INSTALL/usr/share/ppd
      mv foo2zjs-ppds $CRAFT_PART_INSTALL/usr/share/ppd
    build-packages:
      - dc
    stage-packages:
      - psutils
      - bsdutils
      - dc
    prime:
      - usr/bin/*
      - usr/lib/ghostscript-printer-app/filter/command2foo2lava-pjl
      - usr/share/ppd/foo2zjs-ppds
      - usr/share/foo2*
    after: [cups, pyppd]

  pxljr:
    # Upstream source is still available but to include Debian's patches, we
    # are using Debian packaging GIT instead
    # Original homepage: http://hp-pxl-jetready.sourceforge.net/
    source: https://salsa.debian.org/printing-team/pxljr.git
    source-type: git
    source-tag: debian/1.4+repack0-6
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    override-build: |
      set -eux
      autoreconf --install
      craftctl default
      # Generate PPD files for the HP LaserJet 3500 and 3600
      mkdir ppd
      cp HP-Color_LaserJet_3550-pxljr.ppd ppd
      cd ppd
      for n in 3500 3600; do
        perl -p -e "s:3550(?!\&quot):${n}:g" HP-Color_LaserJet_3550-pxljr.ppd > HP-Color_LaserJet_${n}-pxljr.ppd
      done
      # Allow also PDF as input data format
      perl -p -i -e 's,^\*cupsFilter:\s*\"application/vnd.cups-postscript\s+0\s+foomatic-rip\",*cupsFilter: "application/vnd.cups-postscript 100 foomatic-rip"\n*cupsFilter: "application/vnd.cups-pdf 0 foomatic-rip",' *.ppd
      # Make the page rendering by Ghostscript faster
      perl -p -i -e 's,(\-sDEVICE=ijs),-dNOINTERPOLATE \1,' *.ppd
      # Compress the PPD files
      cd ..
      $CRAFT_STAGE/bin/pyppd -v -o pxljr-ppds ppd
      rm -rf ppd
      mkdir -p $CRAFT_PART_INSTALL/usr/share/ppd
      mv pxljr-ppds $CRAFT_PART_INSTALL/usr/share/ppd
    build-packages:
      - autoconf
      - automake
      - libijs-dev
      - libjpeg-dev
    stage-packages:
      - libijs-0.35
    organize:
      usr/lib/cups/filter: usr/lib/ghostscript-printer-app/filter
    prime:
      - usr/bin/ijs_pxljr
      - usr/lib/*/libijs*.so*
      - usr/share/ppd/pxljr-ppds
    after: [cups, pyppd]

  ps-printer-app:
    plugin: make
    source: .
    make-parameters:
      - LDFLAGS="$LDFLAGS -ljpeg"
      - VERSION="$VERSION"
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    # To improve convenience for developers (and everyone who wants to
    # build from source), we do a "make clean" before "make" here,
    # because if we had done "make" off-Snap, directly in the source
    # tree and afterwards build the Snap with snapcraft, the build
    # sucks in our local binary of ps-printer-app instead of
    # compiling its own one in the Snap harness with the appropriate
    # libraries, ending up with the Snap containing an executable
    # which does not work inside the Snap. The "make clean" removes
    # any accidentally grabbed binary.
    #
    # We need to directly call the "make" and "make install" commands
    # here as we cannot inject an environment variable into the default
    # build process ("craftctl default") and we also cannot call
    # "craftctl get version" in the lines of "make-parameters:" or
    # "build-environment:". This way we get the version number of our
    # Snap (which is extracted from the foomatic-db upstream source)
    # into the ps-printer-app executable.
    override-build: |
      set -eux
      make clean
      VERSION="`craftctl get version`"
      make -j"8" LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION"
      make -j"8" install LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION" DESTDIR="$CRAFT_PART_INSTALL"
      #craftctl default
    build-packages:
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0
      - libjbig0
      - liblcms2-2
      - libtiff5
      - libwebp7
    stage:
      - -usr/lib/ps-printer-app
    prime:
      - usr/bin/ps-printer-app
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app
      - usr/share/ppd
      - -var
      - -usr/share/man
    after: [pappl-retrofit, pappl, libcupsfilters, libppd, cups-filters, foomatic-db, hplip]

  scripts:
    source: .
    plugin: dump
    organize:
      example-app: usr/bin/
    prime:
      - usr/bin/example-app
