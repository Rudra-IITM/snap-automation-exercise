name: snap-automation-example
adopt-info: app-1
summary: Example Snap to demonstrate release automation
description: |
  This Snap packages 3 components provided by external GIT
  repositories.  Releases of these 3 components are marked by GIT
  tags.

  The first application, app-1, is the principal application which we
  are snapping here, therefore we derive the Snap's version number
  from app-1.  app-2 and app-3 are auxiliary apps needed by app-1 and
  therefore we have to include them in this Snap.

  We use this example to demonstrate automating new releases of this
  Snap whenever a new release of at least one of the 3 components gets
  issued, to never be behind with Snap package of our app in the Snap
  Store.

  For this we will use the scripting developed for Ubuntu Core Desktop
  and Ubuntu in general, as described in this Ubuntu blog:

      https://ubuntu.com/blog/improving-snap-maintenance-with-automation

  and hosted on the Ubuntu GitHub:

      https://github.com/ubuntu/desktop-snaps

  Note that this Snap is using only trivial application producing nothing
  more than static terminal messages. So if you stumble upon it in the Snap
  Store, do not install it.

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict
base: core22

apps:
  snap-automation-example:
    command: usr/bin/example-app

parts:
  pappl-retrofit:
    source: https://github.com/openprinting/pappl-retrofit
    source-type: git
    source-tag: '1.0b1'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: '%V'
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - perl-base
    stage-packages:
      - libusb-1.0-0
    organize:
      usr/share/legacy-printer-app/testpage.pdf: usr/share/ps-printer-app/testpage.pdf
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app/testpage.pdf
      - -var
      - -usr/bin/legacy-printer-app
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/lib/legacy-printer-app
      - -usr/share/legacy-printer-app
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups, pappl, libcupsfilters, libppd]

  qpdf:
    source: https://github.com/qpdf/qpdf/
    source-type: git
    source-tag: 'v11.8.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '12'
#     no-9x-revisions: true
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/
      - -DCMAKE_BUILD_RPATH_USE_ORIGIN=1
      - -DUSE_IMPLICIT_CRYPTO=0
      - -DREQUIRE_CRYPTO_GNUTLS=1
      - -DSHOW_FAILED_TEST_OUTPUT=1
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
      - -DQTEST_COLOR=0
    build-packages:
      - cmake
      - g++
      - libjpeg-dev
      - zlib1g-dev
      - libgnutls28-dev
    stage-packages:
      - libjpeg-turbo8
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - -etc/fonts
      - -var
      - -usr/include
      - -share/man
      - -share/doc
      - -share/lintian
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/lib/libqpdf.a
      - -usr/lib/libqpdf.la
      - -usr/lib/pkgconfig

  ghostscript:
    #source: https://git.ghostscript.com/ghostpdl.git
    source: https://github.com/ArtifexSoftware/ghostpdl.git
    source-type: git
    source-tag: 'ghostpdl-10.02.1'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: "ghostpdl-%M.%m.%R"
#     lower-than: '11'
#     no-9x-revisions: true
    plugin: autotools
    # We only need PostScript output, for converting PDF input
    autotools-configure-parameters:
      - --prefix=/usr
      - --without-x
      - --disable-gtk
      - --with-drivers=ps2write
      - --enable-freetype
      - --without-tesseract
      - --datarootdir=/snap/ps-printer-app/current/usr/share/
    stage-packages:
      - libpaper1
      - libfontconfig1
      - libfreetype6
      - libpng16-16
    prime:
      - usr/bin/gs
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ghostscript
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    organize:
      snap/ps-printer-app/current/usr/share: usr/share
    after: [cups]

  cups:
    source: https://github.com/OpenPrinting/cups
    source-type: git
    source-tag: 'v2.4.7'
    source-depth: 1
# ext:updatesnap
#   version-format: 
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libcups (with headers, ...) and the backends
    override-build: |
      set -eux
      patch -p1 < $CRAFT_PROJECT_DIR/snap/local/cups-dnssd-backend-socket-only.patch
      # We use "--with-tls=gnutls" here, as current CUPS defaults to SSL here
      # and this is buggy, causing a segfault when serving out a HTTPS web
      # interface page.
      ./configure --sysconfdir=/var/snap/ps-printer-app/common/ --with-tls=gnutls
      cd cups
      make
      cd ..
      cd backend
      # Have USB quirk files in user-modifiable space for debugging
      perl -p -i -e 's/"CUPS_DATADIR"/"USB_QUIRK_DIR"/' usb-libusb.c
      make snmp dnssd socket ipp ipps lpd usb
      cd ..
      mkdir -p $CRAFT_PART_INSTALL/usr/lib
      cp cups/libcups.a $CRAFT_PART_INSTALL/usr/lib/
      cp -P cups/libcups.so* $CRAFT_PART_INSTALL/usr/lib/
      mkdir -p $CRAFT_PART_INSTALL/usr/include/cups
      cp cups/*.h $CRAFT_PART_INSTALL/usr/include/cups/
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      cp cups-config $CRAFT_PART_INSTALL/usr/bin/
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      ( cd backend; \
        cp snmp dnssd socket ipp ipps lpd usb org.cups.usb-quirks $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/ \
      )
      cp conf/snmp.conf $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      #craftctl default
    build-packages:
      - patch
      - gettext
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - libavahi-client-dev
      - libavahi-common-dev
      - libavahi-compat-libdnssd-dev
      - libdbus-1-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libldap2-dev
      - libkrb5-dev
      - libpam0g-dev
      - libpaper-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - perl-base
    stage-packages:
      - libusb-1.0-0
      - libavahi-common3
      - libavahi-client3
      - libicu70
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/ps-printer-app/backend/*
     # Reported unused by snapcraft linter
      - -usr/lib/*/libdconf.*
      - -usr/lib/*/libicuio.*
      - -usr/lib/*/libicutest.*
      - -usr/lib/*/libicutu.*
      - -usr/lib/*/libicuuc.*
      - -usr/lib/*/libicui18n.*

  libcupsfilters:
    source: https://github.com/OpenPrinting/libcupsfilters
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libcupsfilters itself. so we simply do not prime the
    # auxiliary files (/usr/share)
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-avahi
      - --disable-mutool
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - liblcms2-dev
      - libpoppler-cpp-dev
      - libpng-dev
      - libjpeg-dev
      - libtiff5-dev
      - zlib1g-dev
      - libfontconfig1-dev
      - libdbus-1-dev
      - libexif-dev
    stage-packages:
      - libpoppler-cpp0v5
      - libjbig0
      - liblcms2-2
      - libnspr4
      - libnss3
      - libopenjp2-7
      - libpoppler118
      - libtiff5
      - libwebp7
      - libexif12
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
       - usr/share/cups
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
      # Reported unused by snapcraft linter
      - -usr/lib/*/libssl3.*
    after: [cups, qpdf, ghostscript]

  libppd:
    source: https://github.com/OpenPrinting/libppd
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libppd itself, so we also do not prime the auxiliary files
    # here.
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-mutool
      - --disable-pdftocairo
      - --disable-acroread
      - --with-pdftops-path=/snap/ps-printer-app/current/usr/bin/pdftops
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - poppler-utils
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/ppdc
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
    after: [cups, ghostscript, libcupsfilters]

  cups-filters:
    source: https://github.com/OpenPrinting/cups-filters
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    # We only need pdftops and foomatic-rip (for PIN-protected printing
    # on Ricoh and OEM)
    override-build: |
      set -eux
      ./autogen.sh
      ./configure --disable-mutool
      make foomatic-rip
      make pdftops
      mkdir -p $CRAFT_PART_INSTALL
      cp foomatic-rip $CRAFT_PART_INSTALL
      cp pdftops $CRAFT_PART_INSTALL
      #craftctl default
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
    stage-packages:
      - poppler-utils
    organize:
      foomatic-rip: usr/lib/ps-printer-app/filter/foomatic-rip
      pdftops: usr/lib/ps-printer-app/filter/pdftops
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
      - usr/bin/pdftops
      - usr/lib/ps-printer-app
      # Reported unused by snapcraft linter
      - -usr/lib/*/libcairo.*
      - -usr/lib/*/libssl3.*
      - -usr/lib/*/libX11.*
      - -usr/lib/*/libXau.*
      - -usr/lib/*/libXdmcp.*
      - -usr/lib/*/libXext.*
      - -usr/lib/*/libXrender.*
      - -usr/lib/*/libpixman-1.*
      - -usr/lib/*/libxcb.*
      - -usr/lib/*/libxcb-render.*
      - -usr/lib/*/libxcb-shm.*
    after: [cups, ghostscript, libcupsfilters, libppd]

  pyppd:
    source: https://github.com/OpenPrinting/pyppd
    source-type: git
    source-tag: 'release-1-1-0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: "release-%M-%m-%R"
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: python
    override-prime: ""

  foomatic-db:
    source: https://github.com/OpenPrinting/foomatic-db
    source-type: git
    source-tag: '20240109'
    source-depth: 1
    # Excluding foomatic-git from the update automation process
    # as it lacks any official releases.
# ext:updatesnap
#   version-format:
#     format: '%V'
    plugin: nil
    override-pull: |
      set -eux
      # Do the actual pull task
      craftctl default
      # Settings:
      # Grade: stable/devel
      GRADE=stable
      # Package release number (integer)
      PACKAGERELEASE=1
      # Current upstream version of foomatic-db
      #
      # As foomatic-db is simply a collection of printer data and not
      # some software which is under continuous development and
      # milestones of the development turn into releases, it is simply
      # versioned by the date (a cron job on OpenPrinting "releases"
      # it every day.
      #
      # As we want to download it from GIT and not grab a daily
      # tarball for sake of Snap automation we simply take the date of
      # the day after the day of the execution of the pull task of
      # this part as the version number (this is the version in which
      # the current GIT state would land).
      sec_after_epoch=`date +%s`
      upstreamversion="`date -d @$(( $sec_after_epoch + 86400 )) +%Y%m%d`"
      # Compose version string
      version="$upstreamversion-$PACKAGERELEASE"
      # Set version and grade
      craftctl set version="$version"
      craftctl set grade="$GRADE"
    override-build: |
      set -eux
      # Remove non-PostScript manufacturer PPD files
      rm -rf db/source/PPD/*/PDF
      rm -rf db/source/PPD/*/PXL
      rm -rf db/source/PPD/*/PCL5
      # Remove executable bits from PPD files
      find db/source/PPD -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find db/source/PPD -type f \! -name '*.ppd' -print0 | xargs -0 rm || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find db/source/PPD -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $CRAFT_STAGE/bin/pyppd -v -o $CRAFT_PART_INSTALL/foomatic-ps-ppds db/source/PPD
      craftctl default
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      foomatic-ps-ppds: usr/share/ppd/foomatic-ps-ppds
    stage:
      - usr/bin
      - usr/share/ppd
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
    after: [pyppd]

  hplip:
    # We need only the PostScript printer PPD files and the hpps
    # filter executable (for support for PIN-secured printing). We
    # clean up the PPDs from some common errors and as the hpps
    # executable is very simple, we do not run "./configure; make;
    # make install" but call gcc directly instead.
    #
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.v2.git
    source-type: git
    source-tag: debian/3.22.10+dfsg0-2
    source-depth: 1 
    # Excluding hplip from the update automation process because the UpdateSnap script is
    # unable to retrieve the source-tag or source-branch for this repository.
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.22.10/hplip-3.22.10.tar.gz
    plugin: nil
    override-build: |
      set -eux
      cd prnt/hpps
      touch config.h
      gcc -o hpps *.c -I. -I$CRAFT_STAGE/usr/include/ -L$CRAFT_STAGE/usr/lib/ -lcups
      rm config.h
      cd ../..
      mkdir -p $CRAFT_PART_INSTALL
      cp prnt/hpps/hpps $CRAFT_PART_INSTALL
      # Remove executable bits from PPD files
      find prnt/ps -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find prnt/ps -type f \! -name '*.ppd*' -print0 | xargs -0 rm || :
      # Unzip the PPD files (for upstream source)
      # find prnt/ps -type f -name '*.ppd.gz' -print0 | xargs -0 gunzip || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find prnt/ps -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $CRAFT_STAGE/bin/pyppd -v -o $CRAFT_PART_INSTALL/hplip-ps-ppds prnt/ps
      craftctl default
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      hplip-ps-ppds: usr/share/ppd/hplip-ps-ppds
      hpps: usr/lib/ps-printer-app/filter/hpps
    stage:
      - usr/bin
      - usr/share/ppd
      - usr/lib/ps-printer-app
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
      - usr/lib/ps-printer-app
    after: [cups, pyppd]

  ps-printer-app:
    plugin: make
    source: .
    make-parameters:
      - LDFLAGS="$LDFLAGS -ljpeg"
      - VERSION="$VERSION"
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    # To improve convenience for developers (and everyone who wants to
    # build from source), we do a "make clean" before "make" here,
    # because if we had done "make" off-Snap, directly in the source
    # tree and afterwards build the Snap with snapcraft, the build
    # sucks in our local binary of ps-printer-app instead of
    # compiling its own one in the Snap harness with the appropriate
    # libraries, ending up with the Snap containing an executable
    # which does not work inside the Snap. The "make clean" removes
    # any accidentally grabbed binary.
    #
    # We need to directly call the "make" and "make install" commands
    # here as we cannot inject an environment variable into the default
    # build process ("craftctl default") and we also cannot call
    # "craftctl get version" in the lines of "make-parameters:" or
    # "build-environment:". This way we get the version number of our
    # Snap (which is extracted from the foomatic-db upstream source)
    # into the ps-printer-app executable.
    override-build: |
      set -eux
      make clean
      VERSION="`craftctl get version`"
      make -j"8" LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION"
      make -j"8" install LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION" DESTDIR="$CRAFT_PART_INSTALL"
      #craftctl default
    build-packages:
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0
      - libjbig0
      - liblcms2-2
      - libtiff5
      - libwebp7
    stage:
      - -usr/lib/ps-printer-app
    prime:
      - usr/bin/ps-printer-app
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app
      - usr/share/ppd
      - -var
      - -usr/share/man
    after: [pappl-retrofit, pappl, libcupsfilters, libppd, cups-filters, foomatic-db, hplip]

  scripts:
    source: .
    plugin: dump
    organize:
      example-app: usr/bin/
    prime:
      - usr/bin/example-app
